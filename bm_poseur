#!/usr/bin/env python
#
# Copyright (c) 2012 Hewlett-Packard Development Company, L.P.
# All Rights Reserved.
#
#    Licensed under the Apache License, Version 2.0 (the "License"); you may
#    not use this file except in compliance with the License. You may obtain
#    a copy of the License at
#
#         http://www.apache.org/licenses/LICENSE-2.0
#
#    Unless required by applicable law or agreed to in writing, software
#    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
#    License for the specific language governing permissions and limitations
#    under the License.

import argparse
import os.path
import sys
from textwrap import dedent
from lib.settings import settings
from lib.actions import actions

basedir = os.path.dirname(__file__)

def main():
    parser = argparse.ArgumentParser(formatter_class=argparse.RawDescriptionHelpFormatter,
        description=dedent("""
                            This is a CLI utility for creating a virtual bare metal
                            cluster on an isolated bridge network. 
                            
                            (deva help write a better description please??? )
                            
                            Available Commands:
                        
                            create:
                            creates a vm! If a bridge with the name provided by --bridge 
                            doesn't exist this command will trigger the creation of said 
                            bridge before creating the vm.  
                            
                            clean_up:
                            Destroys the bridge and all vm's that were created
                            
                            destroy_bridge:
                            destroys a bridge
                            
                            build_bridge:
                            builds a bridge 
                            
                            get-macs:
                            returns json of the mac address of vms that start with --prefix
                            
                            start_all:
                            starts all the vms with --prefix
                            
                            stop_all:
                            stops all the vms with --prefix  \n\n\n\n """),
        epilog=dedent("""Usage:
        
                    BareMetal Bridge:
                    Configure access to the virtual baremetal LAN for the bootstrap VM.
                    The default will do nothing and error, as changing your machine
                    config can be considered unfriendly. Passing -y will trigger the 
                    demo mode where a local bridge called 'br999' with no external
                    ports connected is created, which as many 'bare metal' virtual
                    machines as you want can be connected to - this is the device that
                    configure-bootstrap-vm uses by default.
                    
                    If you are provising actual hardware, you will want to add actual
                    physical ports (e.g. eth1) by passing '--with-port=eth1' to this
                    script.
                    
                    If you only have one ethernet port in your machine, you will want
                    to migrate your networking configuration to a bridge before running
                    this script, and then pass '--with-port=br0' (or whatever port
                    you chose). In future reconfiguring your local networking may be
                    available as an automated step.   \n\n\n """))
    
    
    # output options
    parser.add_argument('--verbose', '-v', action='count')
    parser.add_argument('--silent', '-s', action='store_true')
                     
    # actions
    parser.add_argument('command',  nargs='+', action=actions,
        help="Command to execute. ", choices=['create','clean-up','destroy-bridge',
                                              'build-bridge','start-all','stop-all',
                                              'get-macs'] )
    
    # all paramaters can be overridden 
    
    # VMS = 1
    parser.add_argument('--vms', nargs='?', type=int, default=settings.VMS,
        help='Number of vm\'s you wish to create.(defaults=1).', choices=range(1,32))
        
    # ARCH = "x86_64"
    parser.add_argument('--arch', nargs='?', default=settings.ARCH,
        help='(defaults=x86_64).', choices=['i386','i686','x86_64'])
        
    # ENGINE = "kvm"
    parser.add_argument('--engine', nargs='?', default=settings.ENGINE,
        help='(defaults=kvm).',choices=['qemu','kvm'])
        
    # MAX_MEM = "524000"
    parser.add_argument('--max-mem', nargs='?', default=settings.MAX_MEM,
        help='(defaults=524000).')
    
    # VCPU = "1" 
    parser.add_argument('--cpus', nargs='?', type=int, default=settings.CPUS,
        help='(defaults=1)', choices=range(1,32))
        
    # QEMU = "qemu:///system"
    parser.add_argument('--qemu', nargs='?', default=settings.QEMU, 
        help='qemu address for lib virt (qemu:///system)')
        
    # BASE_NAME = 'bm_poseur_'
    parser.add_argument('--prefix', nargs='?', default=settings.PREFIX, 
        help='base name of instances (defualt=bm_poseur_)')
    
    # IMAGE_PATH = '/opt/stack/data/bm_poser/'
    parser.add_argument('--image-path', nargs='?', default=settings.IMAGE_PATH, 
        help='path to store disk images of running instances')
    
    # TEMPLATE_DISK = 'template.qcow2'
    parser.add_argument('--template-disk', nargs='?', default=settings.TEMPLATE_DISK, 
        help='name of empty qcow image file in lib.')
    
    # TEMPLATE_XML = "template.xml" %  
    parser.add_argument('--template-xml', nargs='?', default=settings.TEMPLATE_XML, 
        help='name of template xml file in lib.')
    
    # BRIDGE = "br999"
    parser.add_argument('--bridge', nargs='?', default=settings.BRIDGE, 
        help='The name to give the bridge. (defautl=br999)')
    
    parser.add_argument('--bridge-port', nargs='?', action="append",
        help='Add a port (such as eth2) to the bridge.',
        default=[]) # Yes its mutable, don't reuse the parser.
    
    #parser.add_argument('-y', default=False, action='store_true',
    #    help='The interface which bare metal nodes will be connected to.')
        
    parser.add_argument('--network-config','-f', default='/etc/network/interfaces',
        help='Network config file to extend.')
        
    args = parser.parse_args()
    
    # validate input 
    #option_given = not (args.c == None)
    
    #if not option_given:
    #    parser.print_help()
    #    sys.exit(1)
    

if __name__ == '__main__':
    main()